---
import { Icon } from "astro-icon/components";

const { gap = 40 } = Astro.props;
---

<astro-carousel data-gap={gap}>
    <div class="relative flex flex-col gap-5">
        <div class="w-full overflow-hidden">
            <div
                id="carousel"
                class:list={["flex transition-transform duration-300 ease-in-out", `gap-[${gap}px]`]}
            >
                {
                    [1, 2, 3, 4, 5].map((num) => (
                        <div class="min-w-[500px] h-60 flex-shrink-0 bg-blue-200 rounded-lg shadow-md p-6">
                            Card {num}
                        </div>
                    ))
                }
            </div>
        </div>
        <divc class="flex flex-row gap-20 items-center justify-center">
            <button
                id="prev"
                class="text-gray-600 p-2 rounded-full hover:bg-gray-600 hover:text-white md:absolute md:-left-16 md:top-1/2 md:transform md:-translate-y-1/2"
            >
                <Icon name="left" size={25} />
            </button>
            <button
                id="next"
                class="text-gray-600 p-2 rounded-full hover:bg-gray-600 hover:text-white md:absolute md:-right-16 md:top-1/2 md:transform md:-translate-y-1/2"
            >
                <Icon name="right" size={25} />
            </button>
        </divc>
    </div>
</astro-carousel>

<script>
    class AstroCarousel extends HTMLElement {
        carousel: HTMLElement;
        prevButton: HTMLElement;
        nextButton: HTMLElement;
        currentIndex: number;
        gap: number;

        constructor() {
            super();

            this.carousel = this.querySelector("#carousel");
            this.prevButton = this.querySelector("#prev");
            this.nextButton = this.querySelector("#next");
            this.currentIndex = 0;
            this.gap = Number(this.dataset.gap) || 40;
        }

        connectedCallback() {
            window.addEventListener("resize", this.updateCarousel);
            this.nextButton.addEventListener("click", () => {
                if (this.currentIndex < this.carousel.children.length - 1) {
                    this.currentIndex++;
                    this.updateCarousel();
                }
            });

            this.prevButton.addEventListener("click", () => {
                if (this.currentIndex > 0) {
                    this.currentIndex--;
                    this.updateCarousel();
                }
            });
            this.updateCarousel();
        }

        updateCarousel() {
            const cardWidth =
                (this.carousel.children[0] as HTMLElement).offsetWidth +
                this.gap;
            this.carousel.style.transform = `translateX(-${this.currentIndex * cardWidth}px)`;

            this.prevButton.classList.toggle(
                "invisible",
                this.currentIndex === 0
            );
            this.nextButton.classList.toggle(
                "invisible",
                this.currentIndex === this.carousel.children.length - 1
            );
        }
    }

    customElements.define("astro-carousel", AstroCarousel);
</script>
