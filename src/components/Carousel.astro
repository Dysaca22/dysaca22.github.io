---
import { Icon } from "astro-icon/components";


---

<astro-carousel>
    <div class="relative w-full overflow-hidden">
        <div
            id="carousel"
            class="flex gap-4 transition-transform duration-300 ease-in-out mx-10"
        >
            {
                [1, 2, 3, 4, 5].map((num) => (
                    <div class="min-w-[500px] flex-shrink-0 bg-white rounded-lg shadow-md p-6">
                        Card {num}
                    </div>
                ))
            }
        </div>

        <button
            id="prev"
            class="absolute left-0 top-1/2 transform -translate-y-1/2 text-gray-600 p-2 rounded-full hover:bg-gray-600 hover:text-white"
        >
            <Icon name="left" size={25} />
        </button>
        <button
            id="next"
            class="absolute right-0 top-1/2 transform -translate-y-1/2 text-gray-600 p-2 rounded-full hover:bg-gray-600 hover:text-white"
        >
            <Icon name="right" size={25} />
        </button>
    </div>
</astro-carousel>

<script>
    class AstroCarousel extends HTMLElement {
        carousel: HTMLElement;
        prevButton: HTMLElement;
        nextButton: HTMLElement;
        currentIndex: number;

        constructor() {
            super();

            this.carousel = this.querySelector("#carousel");
            this.prevButton = this.querySelector("#prev");
            this.nextButton = this.querySelector("#next");
            this.currentIndex = 0;
        }

        connectedCallback() {
            this.updateCarousel();
            window.addEventListener("resize", this.updateCarousel);
            this.nextButton.addEventListener("click", () => {
                if (this.currentIndex < this.carousel.children.length - 1) {
                    this.currentIndex++;
                    this.updateCarousel();
                }
            });

            this.prevButton.addEventListener("click", () => {
                if (this.currentIndex > 0) {
                    this.currentIndex--;
                    this.updateCarousel();
                }
            });
        }

        updateCarousel() {
            const cardWidth = this.carousel.children[0].offsetWidth + 16; // Card width + gap
            this.carousel.style.transform = `translateX(-${this.currentIndex * cardWidth}px)`;

            // Show/hide buttons based on the current index
            this.prevButton.style.display =
                this.currentIndex === 0 ? "none" : "block";
            this.nextButton.style.display =
                this.currentIndex === this.carousel.children.length - 1
                    ? "none"
                    : "block";
        }
    }

    customElements.define("astro-carousel", AstroCarousel);
</script>
